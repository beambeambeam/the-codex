from typing import Literal

from pydantic import BaseModel, Field

from ..document.schemas import ChunkSearchResponse
from .pocketflow_custom import ShareStoreBase


class ChatMessage(BaseModel):
    role: Literal["user", "assistant", "system"]
    content: str


# NodeTypes = Literal["EmbedChunksNode", "StoreInPgvectorNode", "SearchPgvectorNode", "GenerateResponseNode"]


class SharedStore(ShareStoreBase):
    # Offline Indexing Flow
    input_file_paths: list[str] = Field(
        default_factory=list, description="List of file paths to be indexed"
    )
    parsed_chunks_for_embedding: list[ChunkSearchResponse] = Field(
        default_factory=list,
        description="List of parsed document chunks ready for embedding",
    )
    processed_chunks: list[ChunkSearchResponse] = Field(
        default_factory=list,
        description="List of processed document chunks with embeddings",
    )

    # Online Querying Flow
    user_question: str = Field(
        None, description="User's question or query for the RAG system"
    )
    query_embedding: list[float] = Field(
        None, description="Embedding vector of the user's question"
    )
    retrieved_contexts: list[ChunkSearchResponse] = Field(
        default_factory=list,
        description="List of retrieved document chunks based on the query embedding",
    )
    llm_answer: str = Field(
        None,
        description="Final answer generated by the LLM based on the retrieved contexts",
    )

    # General / Conversational
    chat_history: list[ChatMessage] = Field(
        default_factory=list,
        description="Conversation history including user questions and assistant responses",
    )
    system_instructions: str = Field(
        None,
        description="System instructions or context to guide the LLM's responses",
    )

    # Node Status
    current_node: str = Field(
        None, description="Name of the current node being executed in the flow"
    )

    # Database Collection
    collection_id: str = Field(
        None, description="ID of the database collection being used for the RAG process"
    )

    class Config:
        arbitrary_types_allowed = True
